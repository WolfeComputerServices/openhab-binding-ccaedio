{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start openHAB (Debug)",
            "type": "shell",
            "isBackground": true,
            //"command": "$openhab_home/start.sh debug",
            "windows": {
                "command": "& ${config:openhab_home}/start_debug.bat"
            },
            "presentation": {
                "reveal": "always",
                "panel": "new"
            },
            "problemMatcher": []
        },
        {
            "label": "Stop openHAB",
            "type": "shell",
            //"command": "$openhab_runtime/bin/stop",
            "windows": {
                "command": "& ${config:openhab_runtime}/bin/stop.bat"
            },
            "problemMatcher": []
        },
        {
            "label": "Apply Spotless",
            "type": "shell",
            "command": "mvn",
            "args": [
                "spotless:apply"
            ]
        },
        {
            "label": "mvn Compile (Release)",
            "type": "shell",
            "command": "mvn",
            "args": [
                "clean",
                "install"
            ],
            "dependsOn": [
                "Apply Spotless"
            ],
            "problemMatcher": []
        },
        {
            "label": "mvn Compile (Online)",
            "type": "shell",
            "command": "mvn",
            "args": [
                "clean",
                "install",
                "-DskipChecks"
            ],
            "dependsOn": [
                "Apply Spotless"
            ],
            "problemMatcher": []
        },
        {
            "label": "mvn Compile (Offline)",
            "type": "shell",
            "command": "mvn",
            "args": [
                //"-o",
                "clean",
                "install",
                "-DskipChecks"
            ],
            "dependsOn": [
                "Apply Spotless"
            ],
            "problemMatcher": []
        },
        {
            "label": "Copy Distribution to Addons",
            "type": "shell",
            //"command": "cp",
            "args": [
                "${workspaceFolder}/target/$dist",
                "${config:openhab_addons}"
            ],
            "windows": {
                "command": "Copy-Item",
                "args": [
                    "${workspaceFolder}/target/org.openhab.binding.ccaedio-3.2.0.jar",
                    "${config:openhab_addons}"
                ]
            },
            "dependsOn": [
                "mvn Compile (Offline)"
            ],
            "problemMatcher": []
        },
        {
            "label": "Build",
            "dependsOn": [
                "Copy Distribution to Addons"
            ],
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        },
        {
            "label": "Tail events.log",
            "type": "shell",
            //"command": "tail",
            //"args": [
            //    "-n",
            //    "50",
            //    "-F",
            //    "$openhab_logs/events.log"
            //],
            "windows": {
                "command": "Get-Content",
                "args": [
                    "-Last",
                    "50",
                    "-Path",
                    "${config:openhab_logs}/events.log",
                    "-Wait"
                ]
            },
            "presentation": {
                "reveal": "always",
                "panel": "new"
            },
            "problemMatcher": []
        },
        {
            "label": "Tail openhab.log",
            "type": "shell",
            //"command": "tail",
            //"args": [
            //    "-n",
            //    "50",
            //    "-F",
            //    "$openhab_logs/openhab.log"
            //],
            "windows": {
                "command": "Get-Content",
                "args": [
                    "-Last",
                    "50",
                    "-Path",
                    "${config:openhab_logs}/openhab.log",
                    "-Wait"
                ]
            },
            "presentation": {
                "reveal": "always",
                "panel": "new"
            },
            "problemMatcher": []
        }
    ]
}
